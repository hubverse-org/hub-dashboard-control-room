name: "Generate Target and Forecast Data"
on:
  workflow_call:
    inputs:
      repos:
        required: true
        type: string
      slug:
        required: true
        type: string
      email:
        required: true
        type: string
      regenerate:
        default: false
        required: false
        type: boolean
    secrets:
      id:
        required: true
      key:
        required: true

jobs:
  build-data:
    name: "Generate Data"
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        site: ${{ fromJSON(inputs.repos) }}
    steps:
      - id: is-bot
        name: "Check if we are running a bot"
        run: |
          if [[ "${{ secrets.id }}" = "none" ]]; then
            bot=false
          else
            bot=true
          fi
          echo "bot=$bot" >> "$GITHUB_OUTPUT"
        shell: bash
      - id: id
        name: "setup run variables"
        run: |
          if [[ -n "${{ matrix.site.build }}" ]]; then
            echo "build=${{ matrix.site.build }}" >> $GITHUB_OUTPUT
          else
            echo "build=both" >> $GITHUB_OUTPUT
          fi
          owner="${{ matrix.site.owner }}"
          name="${{ matrix.site.name }}"
          echo "repo=$owner/$name" >> $GITHUB_OUTPUT
          echo "file=$owner-$name-data" >> $GITHUB_OUTPUT
      - id: setup-snake
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - id: install-predtimechart-tool
        name: "Install predtimechart conversion tool"
        run: |
          pip install --upgrade pip
          pip install git+https://github.com/hubverse-org/hub-dashboard-predtimechart
      - uses: actions/create-github-app-token@v1
        if: ${{ steps.is-bot.outputs.bot }}
        id: token
        with:
          app-id: ${{ secrets.id }}
          private-key: ${{ secrets.key }}
          owner: ${{ matrix.site.owner }}
          repositories: ${{ matrix.site.name }}
      - id: checkout-config
        name: "Fetch config files"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          token: ${{ steps.token.outputs.token || secrets.key }}
          repository: ${{ steps.id.outputs.repo }}
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            predtimechart-config.yml
            site-config.yml
      - id: check-configs
        name: "Check if we need to build data"
        shell: "bash"
        run: |
          if [[ ! -f predtimechart-config.yml ]]; then
            echo "::error title=Missing config (${{ steps.id.outputs.repo }})::No predtimechart-config.yml file found. Exiting."
            exit 1
          fi
      - id: check-branch
        name: "check for ptc/data branch and create if needed"
        env:
          GH_TOKEN: ${{ steps.token.outputs.token || secrets.key }}
        run: | 
          exists=$(gh api -X GET "repos/${{ steps.id.outputs.repo }}/branches" --jq '.[].name | select(. == "ptc/data")')
          if [[ "$exists" != "ptc/data" ]]; then
            fetch=true
          else
            fetch=false
          fi
          echo "fetch=$fetch" >> "$GITHUB_OUTPUT"
      - id: checkout-data
        if: ${{ steps.check-branch.outputs.fetch }}
        name: "Checkout ptc/data branch"
        uses: actions/checkout@v4
        with:
          token: ${{ steps.token.outputs.token || secrets.key }}
          persist-credentials: false
          repository: ${{ steps.id.outputs.repo }}
          ref: 'ptc/data'
          path: 'out'
      - id: get-repo-name
        name: "Get information about hub"
        run: |
          mkdir -p out/targets/
          mkdir -p out/forecasts/
          yq eval '.hub' site-config.yml \
          | sed -E -e 's+(https://github.com/|^)+repo=+' \
          | sed -E -e 's+[/]$++' >> $GITHUB_OUTPUT
      - id: clone-repo
        name: "Fetch ${{ steps.get-repo-name.outputs.repo }}"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          repository: ${{ steps.get-repo-name.outputs.repo }}
          path: 'repo'
      - id: build-targets
        name: "Generate target data"
        if: ${{ steps.id.outputs.build == 'both' || steps.id.outputs.build == 'target' }}
        run: |
          ptc_generate_target_json_files \
            repo \
            predtimechart-config.yml \
            out/targets
      - id: json-lives
        if: ${{ steps.id.outputs.build == 'both' || steps.id.outputs.build == 'forecast' }}
        name: "Generate forecast data"
        run: |
          if [[ ${{ inputs.regenerate }} == 'true' ]]; then
            ptc_generate_json_files \
              repo \
              predtimechart-config.yml \
              out/predtimechart-options.json \
              out/forecasts \
              --regenerate
          else
            ptc_generate_json_files \
              repo \
              predtimechart-config.yml \
              out/predtimechart-options.json \
              out/forecasts
          fi
      - name: Upload artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.id.outputs.file }}
          path: 'out/'
  push-data:
    name: "Push Data"
    runs-on: ubuntu-latest
    needs: [build-data]
    continue-on-error: true
    strategy: 
      matrix: 
        site: ${{ fromJSON(inputs.repos) }}
    steps:
      - id: is-bot
        name: "Check if we are running a bot"
        run: |
          if [[ "${{ secrets.id }}" = "none" ]]; then
            bot=false
          else
            bot=true
          fi
          echo "bot=$bot" >> "$GITHUB_OUTPUT"
        shell: bash
      - id: checkout-this-here-repo-scripts
        uses: actions/checkout@v4
        with:
          repository: hubverse-org/hub-dashboard-control-room
          persist-credentials: false
          sparse-checkout: |
            scripts
      - id: id
        name: "setup run variables"
        run: |
          owner="${{ matrix.site.owner }}"
          name="${{ matrix.site.name }}"
          echo "repo=$owner/$name" >> $GITHUB_OUTPUT
          echo "file=$owner-$name-data" >> $GITHUB_OUTPUT
      - uses: actions/create-github-app-token@v1
        if: ${{ steps.is-bot.outputs.bot }}
        id: token
        with:
          app-id: ${{ secrets.id }}
          private-key: ${{ secrets.key }}
          owner: ${{ matrix.site.owner }}
          repositories: ${{ matrix.site.name }}
      - id: check-branch
        env:
          GH_TOKEN: ${{ github.token }}
        name: "check for gh-pages branch and create if needed"
        run: | 
          bash -x "${{ github.workspace }}/scripts/check-branch.sh" \
            "ptc/data" \
            "${{ steps.id.outputs.repo }}" \
            "${{ inputs.slug }}" \
            "${{ inputs.email }}" \
            "${{ steps.token.outputs.token || secrets.key }}"
      - id: checkout-pages
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          repository: ${{ steps.id.outputs.repo }}
          ref: ptc/data
          path: 'data'
          token: ${{ steps.token.outputs.token || secrets.key }}
      - id: fetch-artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.id.outputs.file }}
      - id: publish
        name: "Publish to ptc/data branch"
        run: | 
          ls -larth
          bash -x "${{ github.workspace }}/scripts/pushit.sh" \
            "ptc/data" \
            "${{ steps.id.outputs.repo }}" \
            "${{ inputs.slug }}" \
            "${{ inputs.email }}" \
            "${{ steps.token.outputs.token || secrets.key }}"
