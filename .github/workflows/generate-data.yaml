name: "Generate Target and Forecast Data"
defaults:
  run:
    shell: bash
on:
  workflow_call:
    inputs:
      repos:
        required: false
        type: string
      owner:
        required: false
        type: string
      name:
        required: false
        type: string
      slug:
        required: true
        type: string
      email:
        required: true
        type: string
      publish:
        default: true
        required: true
        type: boolean
      regenerate:
        default: false
        required: true
        type: boolean
      build:
        default: "both"
        required: false
        type: string
    secrets:
      id:
        required: true
      key:
        required: true

env:
  OWNER: ${{ inputs.owner || fromJSON(inputs.repos)[0].owner }}
  REPO: ${{ inputs.name || fromJSON(inputs.repos)[0].name }}

jobs:
  check:
    name: "Setup"
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.bot.outputs.bot }}
      owner: ${{ steps.id.outputs.owner }}
      name: ${{ steps.id.outputs.name }}
      repo: ${{ steps.id.outputs.repo }}
      key: ${{ steps.id.outputs.key }}
      hub: ${{ steps.get-hub-name.outputs.hub }}
      eval-art: ${{ steps.id.outputs.eval-art }}
      forecast-art: ${{ steps.id.outputs.forecast-art }}
      eval-ok: ${{ steps.status.outputs.eval-ok }}
      forecast-ok: ${{ steps.status.outputs.forecast-ok }}
    steps:
      - id: bot
        name: "Check if we are running a bot"
        run: |
          if [[ "${{ secrets.id }}" = "none" ]]; then
            bot=false
          else
            bot=true
          fi
          echo "bot=$bot" >> "$GITHUB_OUTPUT"
      - id: id
        name: "Setup Run Variables"
        run: |
          owner="${{ env.OWNER }}"
          name="${{ env.REPO }}"
          key="${{ env.OWNER}}-${{ env.REPO }}"
          echo "owner=$owner" >> $GITHUB_OUTPUT
          echo "name=$name" >> $GITHUB_OUTPUT
          echo "key=$key" >> $GITHUB_OUTPUT
          echo "repo=$owner/$name" >> $GITHUB_OUTPUT
          echo "eval-art=$key-eval-data" >> $GITHUB_OUTPUT
          echo "forecast-art=$key-forecast-data" >> $GITHUB_OUTPUT
      - uses: actions/create-github-app-token@v1
        id: token
        if: ${{ fromJSON(steps.bot.outputs.bot) }}
        with:
          app-id: ${{ secrets.id }}
          private-key: ${{ secrets.key }}
          owner: ${{ env.OWNER }}
          repositories: ${{ env.REPO }}
      - id: checkout-config
        name: "Fetch config files"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          token: ${{ steps.token.outputs.token || secrets.key }}
          repository: ${{ steps.id.outputs.repo }}
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            predtimechart-config.yml
            predevals-config.yml
            site-config.yml
          path: 'cfg/'
      - id: get-hub-name
        name: "Get information about hub"
        run: |
          yq eval '.hub' cfg/site-config.yml \
          | sed -E -e 's+(https://github.com/|^)+hub=+' \
          | sed -E -e 's+[/]$++' >> $GITHUB_OUTPUT
      - id: status
        name: "Check if we need to build data"
        run: |
          repo=${{ steps.id.outputs.repo }}
          if [[ ! -f cfg/predevals-config.yml ]]; then
            echo "eval-ok=false" >> "$GITHUB_OUTPUT"
            echo "::notice title=$repo: No evals to build::No predevals-config.yml file found."
          else
            echo "eval-ok=true" >> $GITHUB_OUTPUT
          fi
          if [[ ! -f cfg/predtimechart-config.yml ]]; then
            echo "forecast-ok=false" >> "$GITHUB_OUTPUT"
            echo "::notice title=$repo: No forecasts to build::No predtimechart-config.yml file found."
          else
            echo "forecast-ok=true" >> $GITHUB_OUTPUT
          fi
      - name: "Save config files"
        if: ${{ fromJSON(steps.status.outputs.forecast-ok) || fromJSON(steps.status.outputs.eval-ok) }}
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.id.outputs.key }}-cfg
          path: 'cfg/'

  build-evals:
    needs: [check]
    if: ${{ fromJSON(needs.check.outputs.eval-ok) }}
    name: "Generate Eval Page Data"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/hubverse-org/hubpredevalsdata-docker:main
      ports:
        - 80
      volumes:
        - ${{ github.workspace }}:/project
    steps:
      - uses: actions/create-github-app-token@v1
        id: token
        if: ${{ fromJSON(needs.check.outputs.exists) }}
        with:
          app-id: ${{ secrets.id }}
          private-key: ${{ secrets.key }}
          owner: ${{ env.OWNER }}
          repositories: ${{ env.REPO }}
      - id: checkout-config
        name: "Fetch config files"
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.check.outputs.key }}-cfg
      - id: check-branch
        name: "Verify existence of predevals/data branch"
        env:
          GH_TOKEN: ${{ steps.token.outputs.token || secrets.key }}
        run: | 
          exists=$(curl -sSL "https://api.github.com/repos/${{ needs.check.outputs.repo }}/branches" | jq -r '.[].name | select(. == "predevals/data")')
          echo $exists
          if [[ "$exists" = "predevals/data" ]]; then
            fetch=true
          else
            fetch=false
          fi
          echo "fetch=$fetch" >> "$GITHUB_OUTPUT"
      - id: checkout-data
        if: ${{ fromJSON(steps.check-branch.outputs.fetch) }}
        name: "Checkout predevals/data branch"
        uses: actions/checkout@v4
        with:
          token: ${{ steps.token.outputs.token || secrets.key }}
          persist-credentials: false
          repository: ${{ needs.check.outputs.repo }}
          ref: ${{ steps.check-branch.outputs.ref }}
          path: 'out'
      - id: clone-repo
        name: "Fetch ${{ needs.check.outputs.hub }}"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          repository: ${{ needs.check.outputs.hub }}
          path: 'repo'
      - id: build-targets
        name: "Generate scores data"
        run: |
          ls -larth
          mkdir -p out/
          prefix="https://raw.githubusercontent.com/${{ needs.check.outputs.repo }}/refs/heads"
          oracle="${prefix}/main/target-data/oracle-output.csv"
          create-predevals-data.R \
          -h repo \
          -c predevals-config.yml \
          -d $oracle \
          -o out
      - name: "Save scores data artifact"
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.check.outputs.eval-art }}
          path: 'out/'
  build-forecasts:
    needs: [check]
    if: ${{ fromJSON(needs.check.outputs.forecast-ok) }}
    name: "Generate Forecast Page Data"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v1
        if: ${{ fromJSON(needs.check.outputs.exists) }}
        id: token
        with:
          app-id: ${{ secrets.id }}
          private-key: ${{ secrets.key }}
          owner: ${{ env.OWNER }}
          repositories: ${{ env.REPO }}
      - id: checkout-config
        name: "Fetch config files"
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.check.outputs.key }}-cfg
      - id: setup-snake
        name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - id: install-predtimechart-tool
        name: "Install predtimechart conversion tool"
        run: |
          pip install --upgrade pip
          pip install git+https://github.com/hubverse-org/hub-dashboard-predtimechart
      - id: check-branch
        name: "Validate existence of ptc/data branch"
        env:
          GH_TOKEN: ${{ steps.token.outputs.token || secrets.key }}
        run: |
          exists=$(gh api -X GET "repos/${{ needs.check.outputs.repo }}/branches" --jq '.[].name | select(. == "ptc/data")')
          if [[ "$exists" = "ptc/data" ]]; then
            fetch=true
          else
            fetch=false
          fi
          echo "fetch=$fetch" >> "$GITHUB_OUTPUT"
      - id: checkout-data
        if: ${{ fromJSON(steps.check-branch.outputs.fetch) }}
        name: "Checkout ptc/data branch"
        uses: actions/checkout@v4
        with:
          token: ${{ steps.token.outputs.token || secrets.key }}
          persist-credentials: false
          repository: ${{ needs.check.outputs.repo }}
          ref: 'ptc/data'
          path: 'out'
      - id: clone-repo
        name: "Fetch ${{ needs.check.outputs.hub }}"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          repository: ${{ needs.check.outputs.hub }}
          path: 'repo'
      - id: build-targets
        name: "Generate target data"
        if: ${{ inputs.build == 'both' || inputs.build == 'target' }}
        run: |
          ls -larth
          mkdir -p out/targets/
          mkdir -p out/forecasts/
          ptc_generate_target_json_files \
            repo \
            predtimechart-config.yml \
            out/targets
      - id: json-lives
        if: ${{ inputs.build == 'both' || inputs.build == 'forecast' }}
        name: "Generate forecast data"
        run: |
          ls -larth
          mkdir -p out/targets/
          mkdir -p out/forecasts/
          if [[ ${{ inputs.regenerate }} == 'true' ]]; then
            ptc_generate_json_files \
              repo \
              predtimechart-config.yml \
              out/predtimechart-options.json \
              out/forecasts \
              --regenerate
          else
            ptc_generate_json_files \
              repo \
              predtimechart-config.yml \
              out/predtimechart-options.json \
              out/forecasts
          fi
      - name: "Save forecast data artifact"
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.check.outputs.forecast-art }}
          path: 'out/'
  push-forecast-data:
    name: "Push Forecasts to ptc/data branch"
    needs: [check, build-forecasts]
    if: ${{ inputs.publish && needs.check.outputs.forecast-ok }}
    uses: hubverse-org/hub-dashboard-control-room/.github/workflows/push-things.yaml@main
    with:
      is_bot: ${{ fromJSON(needs.check.outputs.exists) }}
      branch: "ptc/data"
      artifact: ${{ needs.check.outputs.forecast-art }}
      owner: ${{ needs.check.outputs.owner }}
      name: ${{ needs.check.outputs.name }}
      slug: ${{ inputs.slug }}
      email: ${{ inputs.email }}
    secrets: inherit
  push-eval-data:
    needs: [check, build-evals]
    name: "Push Evals to predevals/data branch"
    if: ${{ inputs.publish && needs.check.outputs.eval-ok }}
    uses: hubverse-org/hub-dashboard-control-room/.github/workflows/push-things.yaml@main
    with:
      is_bot: ${{ fromJSON(needs.check.outputs.exists) }}
      branch: "predevals/data"
      artifact: ${{ needs.check.outputs.eval-art }}
      owner: ${{ needs.check.outputs.owner }}
      name: ${{ needs.check.outputs.name }}
      slug: ${{ inputs.slug }}
      email: ${{ inputs.email }}
    secrets: inherit
