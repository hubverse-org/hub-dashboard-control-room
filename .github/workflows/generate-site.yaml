name: "Generate Static Site"
defaults:
  run:
    shell: bash
on:
  workflow_call:
    inputs:
      repos:
        required: false
        type: string
      owner:
        required: false
        type: string
      name:
        required: false
        type: string
      slug:
        required: true
        type: string
      email:
        required: true
        type: string
      publish:
        required: false
        type: boolean
        default: true
    secrets:
      id:
        required: true
      key:
        required: true

env:
  OWNER: ${{ inputs.owner || fromJSON(inputs.repos)[0].owner }}
  REPO: ${{ inputs.name || fromJSON(inputs.repos)[0].name }}

jobs:
  build-site:
    name: "Build Site"
    runs-on: ubuntu-latest
    outputs:
      owner: ${{ steps.id.outputs.owner }}
      name: ${{ steps.id.outputs.name }}
      success: ${{ steps.build-site.outputs.success }}
      is-bot: ${{ steps.is-bot.outputs.bot }}
    container:
      image: ghcr.io/hubverse-org/hub-dash-site-builder:main
      ports:
        - 80
      volumes:
        - ${{ github.workspace }}:/site
    steps:
      - id: is-bot
        name: "Check if we are running a bot"
        run: |
          if [[ "${{ secrets.id }}" = "none" ]]; then
            bot=false
          else
            bot=true
          fi
          echo "bot is $bot"
          echo "bot=$bot" >> "$GITHUB_OUTPUT"
        shell: bash
      - uses: actions/create-github-app-token@v1
        if: ${{ fromJSON(steps.is-bot.outputs.bot) }}
        name: "Generate App Token (if no token present)"
        id: token
        with:
          app-id: ${{ secrets.id }}
          private-key: ${{ secrets.key }}
          owner: ${{ env.OWNER }}
          repositories: ${{ env.REPO }}
      - id: id
        name: "setup run variables"
        run: |
          owner="${{ env.OWNER }}"
          name="${{ env.REPO }}"
          echo "owner=$owner" >> $GITHUB_OUTPUT
          echo "name=$name" >> $GITHUB_OUTPUT
          echo "repo=$owner/$name" >> $GITHUB_OUTPUT
          echo "file=$owner-$name-site" >> $GITHUB_OUTPUT
      - id: checkout
        name: "Fetch ${{ steps.id.outputs.repo }}"
        uses: actions/checkout@v4
        with:
          token: ${{ steps.token.outputs.token || secrets.key }}
          persist-credentials: false
          repository: ${{ steps.id.outputs.repo }}
      - id: check-configs
        name: "Check if we need to build site"
        shell: "bash"
        run: |
          if [[ ! -f site-config.yml ]]; then
            echo "::error title=Missing config (${{ steps.id.outputs.repo }})::No site-config.yml file found. Exiting."
            exit 1
          fi
          if [[ -f predtimechart-config.yml ]]; then
            echo "forecasts=true" >> $GITHUB_OUTPUT
          else
            echo "forecasts=false" >> $GITHUB_OUTPUT
          fi
      - id: build-site
        name: "Render Website"
        run: |
          bash /render.sh \
            "${{ env.OWNER }}" \
            "${{ env.REPO }}" \
            "ptc/data" \
            "" \
            "${{ steps.check-configs.outputs.forecasts }}" \
          && echo "success=true" >> $GITHUB_OUTPUT \
          || echo "success=false" >> $GITHUB_OUTPUT
      - name: Upload artifact
        id: upload
        if: ${{ fromJSON(steps.build-site.outputs.success) }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.id.outputs.file }}
          path: '/site/pages/'
          retention-days: 1
  push-site:
    needs: [build-site]
    if: ${{ inputs.publish && fromJSON(needs.build-site.outputs.success) }}
    uses: hubverse-org/hub-dashboard-control-room/.github/workflows/push-things.yaml@znk/move-matrix/14
    with:
      is_bot: ${{ fromJSON(needs.build-site.outputs.is-bot) }}
      branch: "gh-pages"
      artifact: ${{ needs.build-site.outputs.owner }}-${{ needs.build-site.outputs.name }}-site
      owner: ${{ inputs.owner || fromJSON(inputs.repos)[0].owner }}
      name: ${{ needs.build-site.outputs.name }}
      slug: ${{ inputs.slug }}
      email: ${{ inputs.email }}
    secrets: inherit
  # push-site:
  #   name: "Push Site"
  #   runs-on: ubuntu-latest
  #   needs: [build-site]
  #   steps:
  #     - id: id
  #       name: "setup run variables"
  #       run: |
  #         owner="${{ env.OWNER }}"
  #         name="${{ env.REPO }}"
  #         echo "repo=$owner/$name" >> $GITHUB_OUTPUT
  #         echo "file=$owner-$name-site" >> $GITHUB_OUTPUT
  #         if [[ -f "${{runner.temp}}/$owner-$name-site.success" ]];
  #         then
  #           echo "success=true" >> $GITHUB_OUTPUT
  #         else
  #           echo "success=false" >> $GITHUB_OUTPUT
  #         fi
  #     - id: checkout-this-here-repo-scripts
  #       name: "Fetch deployment scripts"
  #       uses: actions/checkout@v4
  #       with:
  #         repository: hubverse-org/hub-dashboard-control-room
  #         persist-credentials: false
  #         sparse-checkout: |
  #           scripts
  #     - id: is-bot
  #       name: "Check if we are running a bot"
  #       run: |
  #         if [[ "${{ secrets.id }}" = "none" ]]; then
  #           bot=false
  #         else
  #           bot=true
  #         fi
  #         echo "bot=$bot" >> "$GITHUB_OUTPUT"
  #       shell: bash
  #     - uses: actions/create-github-app-token@v1
  #       if: ${{ fromJSON(steps.is-bot.outputs.bot) }}
  #       id: token
  #       with:
  #         app-id: ${{ secrets.id }}
  #         private-key: ${{ secrets.key }}
  #         owner: ${{ env.OWNER }}
  #         repositories: ${{ env.REPO }}
  #     - id: check-branch
  #       if: ${{ fromJSON(inputs.publish) }}
  #       name: "check for gh-pages branch and create if needed"
  #       env:
  #         GH_TOKEN: ${{ steps.token.outputs.token || secrets.key }}
  #       run: | 
  #         bash -x "${{ github.workspace }}/scripts/check-branch.sh" \
  #           "gh-pages" \
  #           "${{ steps.id.outputs.repo }}" \
  #           "${{ inputs.slug }}" \
  #           "${{ inputs.email }}" \
  #           "${{ steps.token.outputs.token || secrets.key }}"
  #     - id: checkout-pages
  #       if: ${{ fromJSON(inputs.publish) }}
  #       name: "Fetch ${{ steps.id.outputs.repo }}"
  #       uses: actions/checkout@v4
  #       with:
  #         persist-credentials: false
  #         repository: ${{ steps.id.outputs.repo }}
  #         ref: gh-pages
  #         path: 'pages'
  #         token: ${{ steps.token.outputs.token || secrets.key }}
  #     - id: fetch-artifact
  #       if: ${{ fromJSON(inputs.publish) }}
  #       name: "Load changes"
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ${{ steps.id.outputs.file }}
  #     - id: publish
  #       if: ${{ fromJSON(inputs.publish) }}
  #       name: "Publish site"
  #       run: |
  #         bash -x "${{ github.workspace }}/scripts/pushit.sh" \
  #           "gh-pages" \
  #           "${{ steps.id.outputs.repo }}" \
  #           "${{ inputs.slug }}" \
  #           "${{ inputs.email }}" \
  #           "${{ steps.token.outputs.token || secrets.key }}"
